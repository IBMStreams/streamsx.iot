<?xml version="1.0" encoding="UTF-8"?>
<project name="streamsx.iot.test" default="test">

	<property environment="env"/>
	<property name="streams.install" value="${env.STREAMS_INSTALL}"/>

  <!-- *****************************************************
       To be flexible in testing following properties are to be set
       depending on test enviornment or test context

       The default test context is the test during development.
       The "iot.tk" 'under test' is the build one in the repository.
       The "topology.tk" used for test is the one from the installed
       Streams product.
       Additional toolkits "streams.tk", which iot.tk depends on 
       are taken also from the Streams product.

       So in development environment nothing special has to be set.
      
      ****************************************************** -->
	<property name="iot.tk"
	   location="${basedir}/../com.ibm.streamsx.iot"/>
	<property name="topology.tk"
	   location="${streams.install}/toolkits/com.ibm.streamsx.topology"/>
	<property name="streams.tk"
	   location="${streams.install}/toolkits"/>


   <target name="print-tklocations" >
   <echo message="iot.tk : ${iot.tk}"/>
   <echo message="topology.tk : ${topology.tk}"/>
   <echo message="streams.tk : ${streams.tk}"/>
   </target>


	<property name="sabs"
	   location="${basedir}/sabs"/>
	<property name="quarks"
	   location="${basedir}/ext/quarks/target/java8"/>

   <!-- get junit jars path if it is not set in global CLASSPATH -->
   <!-- local environment may hav set the junit.jar and hamcrest-core.jar -->
   <!-- in their environment CLASSPATH variable             -->
   <!-- in nested build setup it may be defined at ant call -->
	<condition property="junit.jar.location"
			   value="${JUNIT_JAR}"
			   else="">
		<isset property="JUNIT_JAR" />
	</condition>
	<condition property="hamcrest.jar.location"
			   value="${HAMCREST_JAR}"
			   else="">
		<isset property="HAMCREST_JAR" />
	</condition>

<!-- read WatsonIoT application-credentials from properties file -->
  <property file="${basedir}/iotf.properties"/>

  <property name="testsrc.dir" value="src/test/java" />
  <property name="testbuild.dir" value="classes" />

<!-- 
  if this build.xml is called from another build.xml the reports directory can be set from outside
-->
	<condition property="testreports.dir"
			   value="${TESTREPORT_DIR}"
			   else="reports">
		<isset property="TESTREPORT_DIR" />
	</condition>

  <path id="cp.streams">
    <pathelement location="${streams.install}/lib/com.ibm.streams.operator.samples.jar" />
    <pathelement location="${topology.tk}/lib/com.ibm.streamsx.topology.jar" />
  </path>

   <path id="cp.junit">
		<pathelement location="${junit.jar.location}" />
		<pathelement location="${hamcrest.jar.location}" />
   </path>

  <path id="cp.compile">
    <path refid="cp.streams" />
    <path refid="cp.quarks" />
    <path refid="cp.junit" />
    <pathelement location="${iot.tk}/lib/com.ibm.streamsx.iot.jar" />
  </path>

  <path id="cp.quarks">
    <pathelement location="${quarks}/lib/quarks.providers.direct.jar"/>
    <pathelement location="${quarks}/connectors/iotf/lib/quarks.connectors.iotf.jar"/>
  </path>

       <target name="test" depends="init,build.spl.apps,build.sample.apps,unittests,e2etests"/>

       <target name="init" depends="clean">
          <mkdir dir="${sabs}"/>
          <mkdir dir="${testbuild.dir}"/>
          <mkdir dir="${testreports.dir}"/>
       </target>

  <target name="compile" depends="init">
    <javac srcdir="${testsrc.dir}" destdir="${testbuild.dir}" debug="true"
	includeantruntime="yes" source="1.8" target="1.8">
	<classpath>
          <path refid="cp.compile" />
	</classpath>
    </javac>
   </target>

   <target name="test-full" depends="e2etests,unittests">
   </target>


   <!-- *******************************************************
        following properties are needed in this target
        1. as systemproperties which are read by the java/topology app
           streamsx.iot.test.device.cfg - cfg file name of IoT device cfg
           streamsx.iot.toolkitlocation - iot toolkit under test
        2. as environment variable 
           STREAMS_SPLPATH - this env-var is used by topology to determine
                             standard toolit location for tks used by
                             iot toolkit under test
        ******************************************************* -->
   <target name="unittests" depends="print-tklocations,compile">
   <property name="streamsx.iot.test.device.cfg" value="skip"/>
   <junit fork="yes" printsummary="yes" haltonfailure="no" dir="${sabs}">
     <env key="STREAMS_SPLPATH" value="${streams.tk}"/>
     <sysproperty key="streamsx.iot.test.device.cfg"
                  value="${streamsx.iot.test.device.cfg}"/>
     <sysproperty key="streamsx.iot.toolkitlocation"
                 value="${iot.tk}"/>
     <classpath>
         <pathelement location="${testbuild.dir}"/>
         <path refid="cp.compile"/>
     </classpath>
    <!-- <formatter type="xml"/> -->
    <formatter type="plain"/>
    <batchtest todir="${testreports.dir}">
      <fileset dir="${testsrc.dir}">
         <include name="**/*Test.java"/>
         <exclude name="**/Watson*Test.java"/>
      </fileset>
    </batchtest>
    </junit>
    </target>


   <!-- perform tests which use Bluemix WatsonIoT platform           --> 
   <!-- precondition is a running PlatformIoT HUB application         -->
   <!-- event test create an Edgent application which works as device -->
   <!-- result received by topology application is checked against    -->
   <!-- the expected values derived from Edgent sent data             -->
   <!-- *******************************************************
        following properties are needed in this task
        1. as systemproperties which are read by the java/topology app
           streamsx.iot.test.device.cfg - cfg file name of IoT device cfg
           streamsx.iot.toolkitlocation - iot toolkit location under test
        2. as environment variable 
           STREAMS_SPLPATH - this env-var is used by topology to determine
                             a standard toolit location for tk used by
                             iot toolkit location under test
        ******************************************************* -->
   <target name="e2etests" depends="print-tklocations,compile,submit.hubapp">
      <!-- WatsonIot device-ceredentials for fix DeviceType: Test, DeviceId:Test001-->
      <property name="streamsx.iot.test.device.cfg" value="${basedir}/device.cfg"/>
      <junit fork="yes" printsummary="yes" haltonfailure="no" dir="${sabs}">
         <env key="STREAMS_SPLPATH" value="${streams.tk}"/>
         <sysproperty key="streamsx.iot.test.device.cfg"
                     value="${streamsx.iot.test.device.cfg}"/>
         <sysproperty key="streamsx.iot.toolkitlocation"
                    value="${iot.tk}"/>
         <classpath>
            <pathelement location="${testbuild.dir}"/>
            <path refid="cp.compile"/>
         </classpath>
         <!-- <formatter type="xml"/> -->
         <formatter type="plain"/>
         <batchtest todir="${testreports.dir}">
            <fileset dir="${testsrc.dir}">
               <include name="**/Watson*Test.java"/>
            </fileset>
         </batchtest>
      </junit>
      <antcall target="cancel.hubapp"/>
   </target>

	<!-- Compile the applications within the toolkit -->
	<target name="build.spl.apps" depends="init">
	  <build.iot.app
  	    namespace="com.ibm.streamsx.iot.watson.apps"
  	    composite="IotPlatform" />
	  <build.iot.app
  	    namespace="com.ibm.streamsx.iot.apps"
  	    composite="ViewAllDevices" />
	</target>

	<!-- Compile the sample applications -->
	<target name="build.sample.apps" depends="init">
	  <build.sample.app
  	    toolkit="${basedir}/../samples/CountEvents"
  	    namespace="com.ibm.streamsx.iot.sample.countevents"
  	    composite="CountEvents" />
	  <build.sample.app
  	    toolkit="${basedir}/../samples/Edgent"
  	    namespace="com.ibm.streamsx.iot.sample.edgent"
  	    composite="IotpSensors" />
	</target>

    <target name="clean">
        <delete dir="${basedir}/output"/>
        <delete dir="${sabs}"/>
        <delete dir="${testbuild.dir}"/>
        <delete dir="${testreports.dir}"/>
    </target>

   <!-- submit SAB file by executing streamtool direct from ant -->
   <!-- properties read from iotf.properties file defining the credentials
        for an application acessing the Bluemix IOTF service:
         iot.org : organzation
         iot.authKey : application key
         iot.authToken : application authentiocation token
   -->
	<macrodef name="submit.iot.app">
      <attribute name="namespace"/>
      <attribute name="composite"/>
      <sequential>
   	   <exec executable="streamtool" dir="${basedir}" failonerror="true">
            <arg value="submitjob"/>
            <arg value="--outfile"/>
            <arg value="jobids.out"/>
            <arg value="--P"/>
            <arg value="org=${iot.org}"/>
            <arg value="--P"/>
	         <arg value="authKey=${iot.authKey}"/>
            <arg value="--P"/>
	         <arg value="authToken=${iot.authToken}"/>
	         <arg value="${sabs}/@{namespace}.@{composite}.sab"/>
         </exec>
      </sequential>
   </macrodef>

   <!-- SPL compile by execute sc direct from ant -->
   <macrodef name="splcompile">
      <attribute name="toolkitlocations"/>
      <attribute name="maincomposite"/>
      <sequential>
         <exec executable="sc" failonerror="true">
            <arg value="-M"/>
            <arg value="@{maincomposite}"/>
            <arg value="-t"/>
	         <arg value="@{toolkitlocations}"/>
            <arg value="--no-toolkit-indexing"/>
      		<arg value="--optimized-code-generation"/>
         </exec>
      </sequential>
   </macrodef>

   <!-- compile sample applications -->
   <macrodef name="build.sample.app">
      <attribute name="toolkit"/>
      <attribute name="namespace"/>
      <attribute name="composite"/>
      <sequential>
         <splcompile 
			   mainComposite="@{namespace}::@{composite}"
			   toolkitlocations="@{toolkit}:${iot.tk}:${streams.tk}"/>
         <move file="${basedir}/output/@{namespace}.@{composite}.sab"
             toDir="${sabs}"/>
         <delete dir="${basedir}/output"/>
      </sequential>
   </macrodef>

   <!-- compile application being part of toolkit -->
   <macrodef name="build.iot.app">
      <attribute name="namespace"/>
      <attribute name="composite"/>
      <sequential>
         <splcompile
            mainComposite="@{namespace}::@{composite}"
            toolkitlocations="${iot.tk}:${streams.tk}"/>
         <move file="${basedir}/output/@{namespace}.@{composite}.sab"
             toDir="${sabs}"/>
         <delete dir="${basedir}/output"/>
      </sequential>
   </macrodef>

	<!-- Submit the IoTPlatform HUB applications -->
	<target name="submit.hubapp" depends="build.spl.apps"> 
	  <submit.iot.app
  	    namespace="com.ibm.streamsx.iot.watson.apps"
  	    composite="IotPlatform" />
	</target>

	<!-- Cancel the IoTPlatform HUB application job -->
   <target name="cancel.hubapp">
      <exec executable="streamtool" dir="${basedir}" failonerror="true">
         <arg value="canceljob"/>
         <arg value="-f"/>
         <arg value="jobids.out"/>
      </exec>
      <delete file="jobids.out"/>
   </target>

</project>

