/*
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2015,2016
 */

/**
 * Operators to use in conjunction with
 * [com.ibm.streamsx.iot.watson.apps::IotPlatform].
 *
 * `IotPlatform` publishes streams for all the
 * events associated with devices, namely events, commands
 * and status updates.
 *
 * A single copy of `IotPlatform` can be run and then
 * multiple analytic applications subscribe to streams as
 * needed. This allows separation of the IBM Watson IoT
 * Platform connection information (application key) from
 * the analytical applications.
*/

 namespace com.ibm.streamsx.iot;

use com.ibm.streamsx.topology.topic::*;

/**
 * Subscribe to device events published under
 * the streams topic `streamsx/iot/device/events`.
 *
 * This matches the stream topic published by
 * [com.ibm.streamsx.iot.watson.apps::IotPlatform].
 *
 * Filtering on `typeId` and `eventId` is supported,
 * defaulting to no filtering.
 * 
 * @param typeIds Device types to include. Defaults
 * to an empty list meaning all device types.
 * @param eventIds Event identifiers (types) to include. Defaults
 * to an empty list meaning all event identifiers.
 * 
 * @output Events Device events
 */
public composite EventsSubscribe(output stream<DeviceEvent> Events)
{
   param
     expression<list<rstring>> $typeIds : [];
     expression<list<rstring>> $eventIds : [];

   type
       static _EventParam = tuple<list<rstring> typeIds, list<rstring> eventIds>;

   graph
/*
     stream<DeviceEvent> EventsAll = Subscribe()
*/
     stream<DeviceEvent> Events = FilteredSubscribe()
     {
        param
          topic: "streamsx/iot/device/events";
          streamType: DeviceEvent;
          remoteFilter: 
              andFilter(
                  inFilter("typeId", $typeIds),
                  inFilter("eventId", $eventIds));
          localFilterFunction: com.ibm.streamsx.iot::filterEvents;
          localFilterParameter: { typeIds = $typeIds, eventIds = $eventIds};
     }

/*
     // Currently we are filtering on the subscribe side
     // filter will be pushed to the publish side in the future
     stream<DeviceEvent> Events = Filter(EventsAll) {
       param
        filter:
           ((size($typeIds) == 0) || (typeId in $typeIds))
           &&
           ((size($eventIds) == 0) || (eventId in $eventIds));
     }
*/
}

public boolean filterEvents(DeviceEvent e, EventsSubscribe._EventParam p) {
    return
       ((size(p.typeIds) == 0) || (e.typeId in p.typeIds))
           &&
       ((size(p.eventIds) == 0) || (e.eventId in p.eventIds));
}

/**
 * Subscribe to device commands published under
 * the streams topic `streamsx/iotdevice/commands/sent`.
 *
 * This matches the stream topic published by
 * [com.ibm.streamsx.iot.watson.apps::IotPlatform].
 *
 * Filtering on `typeId` and `cmdId` is supported,
 * defaulting to no filtering.
 * 
 * @param typeIds Device types to include. Defaults
 * to an empty list meaning all device types.
 * @param cmdIds Command identifiers (types) to include. Defaults
 * to an empty list meaning all command identifiers.
 * 
 * @output Commands Device commands sent to devices
 */
public composite CommandsSubscribe(output stream<DeviceCmd> Commands)
{
   param
     expression<list<rstring>> $typeIds : [];
     expression<list<rstring>> $cmdIds : [];

   graph
     stream<DeviceCmd> CommandsAll = Subscribe()
     {
        param
          topic: "streamsx/iot/device/commands/sent";
          streamType: DeviceCmd;
     }

     // Currently we are filtering on the subscribe side
     // filter will be pushed to the publish side in the future
     stream<DeviceCmd> Commands = Filter(CommandsAll) {
       param
        filter:
           ((size($typeIds) == 0) || (typeId in $typeIds))
           &&
           ((size($cmdIds) == 0) || (cmdId in $cmdIds));
     }
}

/**
 * Subscribe to device status updates published under
 * the streams topic `streamsx/iot/device/statuses`.
 *
 * This matches the stream topic published by
 * [com.ibm.streamsx.iot.watson.apps::IotPlatform].
 *
 * Filtering on `typeId` is supported,
 * defaulting to no filtering.
 * 
 * @param typeIds Device types to include. Defaults
 * to an empty list meaning all device types.
 * 
 * @output Statuses Device status updates
 */
public composite StatusesSubscribe(output stream<DeviceCmd> Statuses)
{
   param
     expression<list<rstring>> $typeIds : [];

   graph
     stream<DeviceStatus> StatusesAll = Subscribe()
     {
        param
          topic: "streamsx/iot/device/statuses";
          streamType: DeviceStatus;
     }

     // Currently we are filtering on the subscribe side
     // filter will be pushed to the publish side in the future
     stream<DeviceStatus> Statuses = Filter(StatusesAll) {
       param
        filter:
           ((size($typeIds) == 0) || (typeId in $typeIds));
     }
}

/**
 * Publish an event to be sent to a device.
 * via the streams topic `streamsx/iot/device/commands/send`.
 *
 * This matches the streams topic subscribed to by
 * [com.ibm.streamsx.iot.watson.apps::IotPlatform].
 *
 * Any command on the input stream will be
 * sent as a device command assuming
 * [com.ibm.streamsx.iot.watson.apps::IotPlatform]
 * is running, or an equivalant application.
*/
public composite CommandPublish(input stream<DeviceCmd> Commands) {
   graph
     () as PublishCommand = Publish(Commands) {
       param topic: "streamsx/iot/device/commands/send";
     }
}

