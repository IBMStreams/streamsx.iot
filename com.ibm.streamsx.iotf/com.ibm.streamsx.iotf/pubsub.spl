/*
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2015,2016
 */
 namespace com.ibm.streamsx.iotf;

use com.ibm.streamsx.topology.topic::Publish;
use com.ibm.streamsx.topology.topic::Subscribe;

/**
 * Subscribe to device events published under
 * the topic `iotf/device/events`.
 *
 * This matches the topic published by
 * [com.ibm.streamsx.iotf.apps::IotfOrganization].
 *
 * Filtering on `deviceType` and `eventid` is supported,
 * defaulting to no filtering.
 * 
 * @param deviceTypes Device types to include. Defaults
 * to an empty list meaning all device types.
 * @param eventIds Event identifiers (types) to include. Defaults
 * to an empty list meaning all event identifiers.
 * 
 * @output Events Device events
 */
public composite EventsSubscribe(output stream<DeviceEvent> Events)
{
   param
     expression<list<rstring>> $deviceTypes : [];
     expression<list<rstring>> $eventIds : [];

   graph
     stream<DeviceEvent> EventsAll = Subscribe()
     {
        param
          topic: "iotf/device/events";
          streamType: DeviceEvent;
     }

     // Currently we are filtering on the subscribe side
     // filter will be pushed to the publish side in the future
     stream<DeviceEvent> Events = Filter(EventsAll) {
       param
        filter:
           ((size($deviceTypes) == 0) || (deviceType in $deviceTypes))
           &&
           ((size($eventIds) == 0) || (eventId in $eventIds));
     }
}

/**
 * Publish an event to be sent to a device.
 * with the topic `iotf/device/commands/send`.
 *
 * This matches the topic subscribed to by
 * [com.ibm.streamsx.iotf.apps::IotfOrganization].
 *
 * Any command on the input stream will be
 * sent as a device command assuming
 * [com.ibm.streamsx.iotf.apps::IotfOrganization]
 * is running, or an equivalant application.
*/
public composite CommandPublish(input stream<DeviceCmd> Commands) {
   graph
     () as PublishCommand = Publish(Commands) {
       param topic: "iotf/device/commands/send";
     }
}

