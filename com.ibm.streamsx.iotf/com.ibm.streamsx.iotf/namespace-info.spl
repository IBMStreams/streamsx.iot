/*
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2015, 2016
 */
 
 /**
 * Connectivity with IBM Watson IoT Platform.
 * 
 * # IBM Watson IoT Platform
 * The IBM [https://internetofthings.ibmcloud.com/|IBM Watson Iot Platform] service lets
 * your IBM Streams applications communicate with and consume data
 * collected by your connected devices, sensors, and gateways.
 * 
 * # Device Events
 * Devices publish device events that an SPL application can subscribe to
 * using [DeviceEvents]. The default is to subscribe to all event identifiers
 * from all device types and ids. The operator is parameterized to allow
 * only subscribing to a specific event id (which is really the type of the event),
 * a specific device type and/or a specific device using its id.
 * 
 * The assumption is made that the format of the event is JSON and the
 * resulting stream is of type [DeviceEvent]. The `jsonString` parameter
 * contains the event payload in serialized JSON. The event payload is a JSON object using
 * [https://docs.internetofthings.ibmcloud.com/messaging/payload.html|event format specification],
 * so that the application event data is the value of the `d` key.
 * 
 * The application event data can be extracted into an SPL tuple
 * using [DeviceEventExtractData]. This operator takes an input stream
 * of type [DeviceEvent] and produces a stream of type [DeviceEventTs]
 * augmented with a `dataType` tuple type specified by the application.
 * Since the application event data might be specific to
 * the type of the `eventId` or even the combination of `deviceType`
 * and `eventId` an application may need to use a `Split` operator
 * between the [DeviceEvents] and multiple [DeviceEventExtractData]
 * invocations. An example of its use is in the
 * [com.ibm.streamsx.iotf.quickstart::Quickstart] application.
 *
 * # Device Status
 * Device status events, such as connect or disconnect, are subscribed to using
 * [DeviceStatuses] which produces a stream of type [DeviceStatus].
 * 
 * # Device Commands
 * Devices can be sent commands, an SPL application can subscribe to
 * commands being sent to devices using [DeviceCommands]. 
 * The default is to subscribe to all commands identifiers
 * for all device types and ids. The operator is parameterized to allow
 * only subscribing to a specific command id (which is really the type of the command),
 * a specific device type and/or a specific device using its id. 
 * 
 * An SPL application can send a command to a specific device using [SendCommandToDevice]
 * with the input stream type of [DeviceCmd]. The `jsonString` attribute contains
 * the application specific portion of the command represented as serialized JSON.
 * 
 * # Recommended Deployment
 * 
 * Use of publish-subscribe is recommended to allow analytic applications
 * to be developed and deployed independent of the connectivity to
 * IBM Watson IoT Platform.
 *
 * This is achieved by submitting the [com.ibm.streamsx.iotf.apps::IotfOrganization] application to IBM Streams. This is the only job that then connects
 * to the IoT platform, it publishes streams that contain device
 * events, commands and status updates.
 *
 * Analytic applications then use
 * [EventsSubscribe], [CommandsSubscribe] and [StatusesSubscribe] to
 * subscribe to streams to be analyzed.
 *
 * Analytic applications then use [CommandPublish] to send device
 * commands to individual devices.
 *
 * The benefits of this approach are:
 * * Only a single application (`IotfOrganization`) needs to know the authorization tokens.
 * * Analytic applications can be added and removed at any time without disrupting existing running applications.
 *
 * # Connectivity using MQTT
 * 
 * A Streams application using this toolkit connects to
 * IBM Watson IoT Platform as an
 * [https://docs.internetofthings.ibmcloud.com/messaging/applications.html|MQTT application]
 * 
 * Each invocation of an operator in this toolkit (e.g. [DeviceEvents], [DeviceStatuses])
 * makes its own MQTT connection using a client identifier of `a:`*orgId*`:`*appKey*`_`*appId*.
 * A Streams application must ensure that each operator invocation uses a client identifier
 * that is unique for its `orgId`. Reuse of client identifiers, even across multiple
 * applications, is not allowed and will result in unexpected disconnection of clients.
 * The default `appId` ensures that the client identifiers will be unique
 * for an instance if there is only a single invocation of each operator kind in an application. In this case
 * the MQTT client identifier is `a:`*orgId*`:`*appKey*`_`*jobId*`_xxx` where `xxx` is specific to each operator kind.
 * 
 * # JSON Message Format
 * 
 * This toolkit supports using JSON as the message format.
 */

namespace com.ibm.streamsx.iotf;
