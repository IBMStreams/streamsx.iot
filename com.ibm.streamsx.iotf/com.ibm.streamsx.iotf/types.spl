namespace com.ibm.streamsx.iotf;

use com.ibm.streamsx.datetime::TimeMillis;
use com.ibm.streamsx.json::Json;

/**
 * A device.
 * * `deviceType` - Type of device that issued the event.
 * * `deviceId` - Identifier of device that issued the event.
*/
type Device = tuple<rstring deviceType, rstring deviceId>;

/**
 * A device with event identifier.
 * * `deviceType` - Type of device that issued the event.
 * * `deviceId` - Identifier of device that issued the event.
 * * `eventId` - Event identifier.
*/
type DeviceEventId = Device, tuple<rstring eventId>;

/**
 * A device event.
 * * `deviceType` - Type of device that issued the event.
 * * `deviceId` - Identifier of device that issued the event.
 * * `eventId` - Event identifier.
 * * `jsonString` - Event payload in JSON IoTF event format specification.
 * 
 * The event payload is a JSON object using
 * [https://docs.internetofthings.ibmcloud.com/messaging/payload.html|IoTF event format specification]
 * and thus has two elements:
 * * `d` - Event data, this is the event data as sent by the device application.
 * * `ts` - Event timestamp. This is an optional element, if included its value should be a valid ISO8601 encoded timestamp string.
 * 
 */
type DeviceEvent = DeviceEventId, Json;

/**
 * A device with event identfier and timestamp. This is
 * used as part of the output schema definition
 * by [DeviceEventExtractData].
 *
 * * `deviceType` - Type of device that issued the event.
 * * `deviceId` - Identifier of device that issued the event.
 * * `eventId` - Event identifier.
 * * `eventTs` - Event timestamp extracted from the `ts` key of the JSON event. `eventTs` has type `com.ibm.streamsx.datetime.TimeMillis` representing the number of milliseconds since the 1970/01/01 epoch.
*/
type DeviceEventTs = DeviceEventId, tuple<TimeMillis eventTs>;

/**
 * A device status event.
 * * `deviceType` - Type of device that issued the event.
 * * `deviceId` - Identifier of device that issued the event.
 * * `jsonString` - Status ???
 * 
 */
type DeviceStatus = Device, Json;


/**
 * A device command.
 * * `deviceType` - Type of device the command is for.
 * * `deviceId` - Identifier of device the command is for.
 * * `cmdId` - Command identifier.
 * * `jsonString` - Command data.
 * 
 */
type DeviceCmd = Device, tuple<rstring cmdId>, Json;



