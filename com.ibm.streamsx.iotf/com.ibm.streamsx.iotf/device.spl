/*
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2015  
 */

namespace com.ibm.streamsx.iotf ;

use com.ibm.streamsx.json::Json;
use com.ibm.streamsx.messaging.mqtt::MQTTSource ;
use com.ibm.streamsx.messaging.mqtt::MQTTSink ;

/**
 * @exclude
 */
type RawMsg = Json, tuple<rstring topic>;

/**
 * @exclude
 */
public rstring getIotfUri(rstring orgId) {
    return "tcp://" + orgId + ".messaging.internetofthings.ibmcloud.com:1883";
}
 
 /**
 * Subscribe to device events for an IoTF organization.
 * 
 * This operator subscribes to the IoTF MQTT topic:
 * 
 * `iot-2/type/`*deviceType*`/id/`*deviceId*`/evt/`*eventId*`/fmt/json`
 * 
 * @param orgId IoTF organization identifier.
 * @param apiKey IoTF application key.
 * @param apiToken IoTF application authorization token.
 * @param appId IoTF application identifier for the MQTT client identifier, defaults to *jobId*`_evt`.
 * @param deviceType Subscribe to device events from devices of a specific type. Defaults to `+` for all device types.
 * @param deviceId Subscribe to device events from a specific device. Defaults to `+` for all devices with the specified type.
 * @param eventId Subscribe to device events for a specified identifier. Defaults to `+` for all event identifiers.
 * 
 * @output Events Stream of device events of type [DeviceEvent].
 */
public composite DeviceEvents(output stream<DeviceEvent> Events)
{
    param
        expression<rstring> $orgId;
        expression<rstring> $apiKey;
        expression<rstring> $apiToken;
        expression<rstring> $appId : (rstring) jobID() +"_evt";
        
        
        expression<rstring> $deviceType : "+";
        expression<rstring> $deviceId : "+";
        expression<rstring> $eventId : "+";
	graph
		stream<RawMsg> RawEvents = DeviceTopic()
		{		         
			param	
            orgId: $orgId;
            appId: $appId;
            apiKey: $apiKey;
            apiToken: $apiToken;
            
            topic: "iot-2/type/" + $deviceType + "/id/" + $deviceId + "/evt/" + $eventId + "/fmt/json";
            }
            
       stream<DeviceEvent> Events = Raw2DeviceEvent(RawEvents) {}
}

/**
 * Convert a raw device message into a DeviceEvent.
 * @exclude
 */
public composite Raw2DeviceEvent(input RawEvents; output Events) {
     graph
            stream<DeviceEvent> Events = Functor(RawEvents) {
       logic state: {
             mutable rstring _deviceType = "";
             mutable rstring _deviceId = "";
             mutable rstring _eventId = "";
       }
       onTuple RawEvents:
       {
          list<rstring> tokens = tokenize(topic, "/", false);
          _deviceType = tokens[2];
          _deviceId = tokens[4];
          _eventId = tokens[6];
       }
       output Events: 
           deviceType = _deviceType,
           deviceId = _deviceId,
           eventId = _eventId;
       }
}


 /**
 * Subscribe to device status events for an IoTF organization.
 * 
 * This operator subscribes to the IoTF MQTT topic:
 * 
 * `iot-2/type/`*deviceType*`/id/`*deviceId*`/mon/`
 * 
 * @param orgId IoTF organization identifier.
 * @param apiKey IoTF application key.
 * @param apiToken IoTF application authorization token.
 * @param appId IoTF application identifier for the MQTT client identifier, defaults to *jobId*`_mon`.
 * @param deviceType Subscribe to device events from devices of a specific type. Defaults to `+` for all device types.
 * @param deviceId Subscribe to device events from a specific device. Defaults to `+` for all devices with the specified type.
 * 
 * @output Statuses Stream of device status events of type [DeviceStatus].
 */
public composite DeviceStatuses(output stream<DeviceStatus> Statuses)
{
    param
        expression<rstring> $orgId;
        expression<rstring> $appId : (rstring) jobID() + "_mon";
        expression<rstring> $apiKey;
        expression<rstring> $apiToken;
        
        expression<rstring> $deviceType : "+";
        expression<rstring> $deviceId : "+";
	graph
		stream<RawMsg> RawStatuses = DeviceTopic()
		{		         
			param
            orgId: $orgId;
            appId: $appId;
            apiKey: $apiKey;
            apiToken: $apiToken;
            
            topic: "iot-2/type/" + $deviceType + "/id/" + $deviceId + "/mon";
            }
            
      stream<DeviceStatus> Statuses = Functor(RawStatuses) {
       logic state: {
             mutable rstring _deviceType = "";
             mutable rstring _deviceId = "";
       }
       onTuple RawStatuses:
       {
          list<rstring> tokens = tokenize(topic, "/", false);
          _deviceType = tokens[2];
          _deviceId = tokens[4];
       }
       output Statuses: 
           deviceType = _deviceType,
           deviceId = _deviceId;
       }
}

 /**
 * Subscribe to device commands for an IoTF organization.
 * 
 * This operator subscribes to the IoTF MQTT topic:
 * 
 * `iot-2/type/`*deviceType*`/id/`*deviceId*`/cmd/`*cmdId*`/fmt/json`
 * 
 * @param orgId IoTF organization identifier.
 * @param apiKey IoTF application key.
 * @param apiToken IoTF application authorization token.
 * @param appId IoTF application identifier for the MQTT client identifier, defaults to *jobId*`_cmd`.
 * @param deviceType Subscribe to device commands for devices of a specific type. Defaults to `+` for all device types.
 * @param deviceId Subscribe to device commands for a specific device. Defaults to `+` for all devices with the specified type.
 * @param cmdId Subscribe to device commands for a specified identifier. Defaults to `+` for all command identifiers.
 * 
 * @output Commands Stream of device commands of type [DeviceCmd].
 */
public composite DeviceCommands(output stream<DeviceCmd> Commands)
{
    param
        expression<rstring> $orgId;
        expression<rstring> $apiKey;
        expression<rstring> $apiToken;
        expression<rstring> $appId : (rstring) jobID() +"_cmd";
        
        
        expression<rstring> $deviceType : "+";
        expression<rstring> $deviceId : "+";
        expression<rstring> $cmdId : "+";
	graph
		stream<RawMsg> RawCommands = DeviceTopic()
		{	         
			param	
            orgId: $orgId;
            appId: $apiKey + "_" + $appId;
            apiKey: $apiKey;
            apiToken: $apiToken;
            
            topic: "iot-2/type/" + $deviceType + "/id/" + $deviceId + "/cmd/" + $cmdId + "/fmt/json";
            }
            
       stream<DeviceCmd> Commands = Functor(RawCommands) {
       logic state: {
             mutable rstring _deviceType = "";
             mutable rstring _deviceId = "";
             mutable rstring _cmdId = "";
       }
       onTuple RawCommands:
       {
          list<rstring> tokens = tokenize(topic, "/", false);
          _deviceType = tokens[2];
          _deviceId = tokens[4];
          _cmdId = tokens[6];
       }
       output Commands: 
           deviceType = _deviceType,
           deviceId = _deviceId,
           cmdId = _cmdId;
       }
}

/*
 * @exclude
 */
composite DeviceTopic(output Messages)
{
    param
        expression<rstring> $orgId;
        expression<rstring> $appId;
        expression<rstring> $apiKey;
        expression<rstring> $apiToken;
        expression<rstring> $topic;
	graph
		stream<RawMsg> Messages = MQTTSource()
		{
		    logic state: {
		      rstring _topic = $topic;
		      rstring _clientId = "a:" + $orgId + ":" + $appId;
		      rstring _userId = $apiKey;
		      rstring _password = $apiToken;
		      rstring _serverURI = getIotfUri($orgId);
		    }
		         
			param
			    clientID: _clientId;
			    userID: _userId;
			    password: _password;
				topics : _topic ;
				serverURI: _serverURI;
				
				topicOutAttrName: "topic";
				dataAttributeName: "jsonString";
		}
}

 /**
 * Send commands to devices registered for an IoTF organization.
 * Each tuple is published as a device command to the
 * device specified in the input tuple.
 * 
 * This operator publishes each command to IoTF MQTT topic:
 * 
 * `iot-2/type/`*deviceType*`/id/`*deviceId*`/cmd/`*cmdId*`/fmt/json`
 * 
 * @param orgId IoTF organization identifier.
 * @param apiKey IoTF application key.
 * @param apiToken IoTF application authorization token.
 * @param appId IoTF application identifier for the MQTT client identifier, defaults to *jobId*`_snd`.
 * 
 * @input Commands Stream of device commands of type [DeviceCmd].
 */
public composite SendCommandToDevice(input stream<DeviceCmd> Commands) {
   param
        expression<rstring> $orgId;
        expression<rstring> $appId : (rstring) jobID() + "_snd";
        expression<rstring> $apiKey;
        expression<rstring> $apiToken;
   graph
        stream<RawMsg> RawCmds = Functor(Commands) {
            output RawCmds:
                topic = "iot-2/type/" + deviceType + "/id/" + deviceId + "/cmd/" + cmdId + "/fmt/json";
        }
        
        () as DeviceCmds = MQTTSink(RawCmds) {
        
 		    logic state: {
		      rstring _clientId = "a:" + $orgId + ":" + $appId;
		      rstring _userId = $apiKey;
		      rstring _password = $apiToken;
		      rstring _serverURI = getIotfUri($orgId);
		    }
		         
			param
			    clientID: _clientId;
			    userID: _userId;
			    password: _password;				
				serverURI: _serverURI; 
				
				topicAttributeName : "topic" ;
				dataAttributeName: "jsonString";
           
        }  
        
}


