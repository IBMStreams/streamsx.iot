/*
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2016
 */

namespace com.ibm.streamsx.iot.sample.countevents;

use com.ibm.streamsx.datetime.convert::minutes;
use com.ibm.streamsx.iot::*;

/**
 * Payload for the device command with
 * identifier `eventCount` sent back to devices.
*/
type CountInfo = rstring eventId, int32 count;

/**
 * Sample application that counts device events.
 * Counts events from devices and sends back a
 * device command with aggregated counts over
 * the last minute.
 *
 * This uses the publish-subscribe model
 * thus an instance of `com.ibm.streamsx.iotf.apps.IotOrganization`
 * must be running within the Streams instance in order to
 * see events.
 *
*/
public composite CountEvents {
     graph

      // Subscribe to all events.
      stream<DeviceEvent> Events = EventsSubscribe() {}

      // count events tumbling every minute.
      stream<DeviceEventId, tuple<int32 count>> EventCounts = Aggregate(Events)
      {
          window Events: tumbling, time(minutes(1));
          param
             groupBy: typeId, deviceId, eventId;
          output EventCounts:
             count = Count();
      }

      // Convert them into device commands with command Id "eventCount"
      stream<DeviceCmdId, tuple<CountInfo countInfo>> EventCommands = Functor(EventCounts)
      {
          output EventCommands:
             cmdId = "eventCount",
             countInfo = {eventId=eventId, count=count};
      }

      // Convert them into the required schema
      stream<DeviceCmd> EventCommandsJson = CommandTupleToPayload(EventCommands)
      {
            param
              payload: countInfo;
      }

      // And then publish them
      () as PublishCmds = CommandPublish(EventCommandsJson) {}
}
