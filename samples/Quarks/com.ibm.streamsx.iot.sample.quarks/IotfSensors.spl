/*
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2016
 */

namespace com.ibm.streamsx.iot.sample.quarks;

use com.ibm.streamsx.iot::*;

/**
 * SPL type for aggregation info in device event.
*/
type AggInfo = float64 MAX, float64 MIN, float64 MEAN, float64 STDDEV;

/**
 * SPL type for aggregation sensor info in device event.
*/
type SensorInfo = rstring name, AggInfo reading;

/**
 * SPL type for device command payload sending
 * a warning message.
*/
type WarningInfo = rstring msg;

/**
 * Application that matches the Quarks sample
 * quarks.samples.connectors.iotf.IotfSensors.
 *
 * No analytics are performed, just a warning is echoed
 * back to the device as a device command if a device
 * event with identifier `sensor` is received.
 * A `DeDuplicate` operator is used to ensure
 * that a burst of sensor events only sends back
 * a single alert in an eight second period.
 *
 * This uses the publish-subscribe model
 * thus an instance of `com.ibm.streamsx.iotf.apps.IotOrganization`
 * must be running within the Streams instance in order to
 * see events.
*/
public composite IotfSensors {
  graph

   stream<DeviceEvent> SensorEventsJson = EventsSubscribe() {
       param
        eventIds: ["sensors"];
   }

   @view(name = "SensorEvents", port = SensorEvents, sampleSize = 5, bufferSize = 50)
   stream<DeviceEventTs, SensorInfo> SensorEvents = DeviceEventExtractData(SensorEventsJson) {
       param
          events : true; // Events are selected by the EventsSubscribe
          dataType: SensorInfo;
   }

   stream<SensorEvents> SensorEventsDeDup = DeDuplicate(SensorEvents) {
       param
       timeOut: 8.0;
       key: typeId, deviceId, name;
   }

   stream<DeviceCmdId, tuple<WarningInfo warning>> SensorWarnings = Functor(SensorEventsDeDup) {
       output SensorWarnings:
          cmdId = "display",
          warning = {msg = "Alert!" + name + "=" + ((rstring) reading.MEAN)};
   }

   // Convert them into the required schema
   @view(name = "SensorWarnings", port = CommandsJson, sampleSize = 5, bufferSize = 50)
   stream<DeviceCmd> CommandsJson = CommandTupleToPayload(SensorWarnings)
   {
        param
           payload: warning;
   }
   () as PublishWarning = CommandPublish(CommandsJson) { }
}
